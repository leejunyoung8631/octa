# -*- coding: utf-8 -*-
"""CAM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DIJ-qzofFR__n71SHQ9ayoJQ7tzmPRl5
"""

import torch
import torchvision
import torchvision.transforms as transforms

import torch.nn as nn
import torch.nn.functional as F

torch.cuda.is_available()

transform = transforms.Compose([
                                transforms.Resize(224),
                                transforms.ToTensor(),
                                transforms.Normalize( (0.5, 0.5, 0.5), (0.5, 0.5, 0.5) ),
])

trainset = torchvision.datasets.STL10(root='/', split='train', download=True, transform = transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size = 32, shuffle = True)

testset = torchvision.datasets.STL10(root='/', split='test', download=True, transform = transform)
testloader = torch.utils.data.DataLoader(testset, batch_size = 32, shuffle = False)

class Net(nn.Module):
  def __init__(self):
    super(Net, self).__init__()
    self.conv = nn.Sequential(
        # 3 224 128
        nn.Conv2d(3, 64, 3, padding=1), nn.LeakyReLU(0.2),
        nn.Conv2d(64, 64, 3, padding=1), nn.LeakyReLU(0.2),
        nn.MaxPool2d(2,2),
        # 64, 112, 64
        nn.Conv2d(64, 128, 3, padding=1), nn.LeakyReLU(0.2),
        nn.Conv2d(128, 128, 3, padding=1), nn.LeakyReLU(0.2),
        nn.MaxPool2d(2,2),
        # 128, 56, 32
        nn.Conv2d(128, 256, 3, padding=1), nn.LeakyReLU(0.2),
        nn.Conv2d(256, 256, 3, padding=1), nn.LeakyReLU(0.2),
        nn.Conv2d(256, 256, 3, padding=1), nn.LeakyReLU(0.2),
        nn.MaxPool2d(2,2),
        # 256 28 16
        nn.Conv2d(256, 512, 3, padding=1), nn.LeakyReLU(0.2),
        nn.Conv2d(512, 512, 3, padding=1), nn.LeakyReLU(0.2),
        nn.Conv2d(512, 512, 3, padding=1), nn.LeakyReLU(0.2),
        nn.MaxPool2d(2,2),
        # 512 14 8
        nn.Conv2d(512, 512, 3, padding=1), nn.LeakyReLU(0.2),
        nn.Conv2d(512, 512, 3, padding=1), nn.LeakyReLU(0.2),
        nn.Conv2d(512, 512, 3, padding=1), nn.LeakyReLU(0.2),
        nn.MaxPool2d(2,2),
    )

    self.avg_pool = nn.AvgPool2d(7)
    self.classifier = nn.Linear(512, 10)

    '''
    self.fc1 = nn.Linear(512*2*2, 4096)
    self.fc2 = nn.Linear(4096, 4096)
    self.fc3 = nn.Linear(4096, 10)
    '''

  def forward(self, x):

    features = self.conv(x)
    x = self.avg_pool(features)
    x = x.view(features.size(0), -1)
    x = self.classifier(x)

    return x, features

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

net = Net()
net = net.to(device)
param = list(net.parameters())
print(len(param))
for i in param:
  print(i.shape)

classes = ('airplane', 'bird', 'car', 'cat', 'deer', 'dog', 'horse', 'monkey', 'ship', 'truck')
import torch.optim as optim

criterion = nn.CrossEntropyLoss().cuda()
optimizer = optim.Adam(net.parameters(), lr = 0.00001)

for epoch in range(100):
  running_loss = 0.0
  for i, data in enumerate(trainloader, 0):
    inputs, labels = data
    inputs, labels = inputs.to(device), labels.to(device)
    optimizer.zero_grad()

    outputs, f = net(inputs)
    loss = criterion(outputs, labels)
    loss.backward()
    optimizer.step()

    if (loss.item() > 1000):
      print(loss.item())
      for param in net.parameters():
        print(param.data)
    
    running_loss += loss.item()
    if i % 50 == 49:
      print('[%d, %5d] loss: %.3f' %(epoch + 1, i+1, running_loss / 50))
      running_loss = 0.0

print("Finished Training")

class_correct = list(0. for i in range(10))
class_total = list(0. for i in range(10))
with torch.no_grad():
  for data in testloader:
    images, labels = data
    images = images.cuda()
    labels = labels.cuda()
    outputs, _ = net(images)
    _, predicted = torch.max(outputs, 1)
    c = (predicted == labels).squeeze()
    for i in range(4):
      label = labels[i]
      class_correct[label] += c[i].item()
      class_total[label] += 1

for i in range(10):
  print('정확 %5s : %2d %%' % (classes[i], 100 * class_correct[i] / class_total[i]))





from PIL import Image
from matplotlib.pyplot import imshow
from torchvision import models, transforms
from torch.autograd import Variable
from torch.nn import functional as F
from torch import topk
import numpy as np
import skimage.transform

image = Image.open("/content/cat.jpg")
imshow(image)

# Imagenet mean/std

normalize = transforms.Normalize(
   mean=[0.485, 0.456, 0.406],
   std=[0.229, 0.224, 0.225]
)

# Preprocessing - scale to 224x224 for model, convert to tensor, 
# and normalize to -1..1 with mean/std for ImageNet

preprocess = transforms.Compose([
   transforms.Resize((224,224)),
   transforms.ToTensor(),
   normalize
])

display_transform = transforms.Compose([
   transforms.Resize((224,224))])

tensor = preprocess(image)

print(tensor.shape)

prediction_var = Variable((tensor.unsqueeze(0)).cuda(), requires_grad=True)

print(prediction_var.shape)

model = models.resnet18(pretrained=True)

model.cuda()
model.eval()

class SaveFeatures():
    features=None
    def __init__(self, m): 
      self.hook = m.register_forward_hook(self.hook_fn)
    def hook_fn(self, module, input, output): 
      self.features = ((output.cpu()).data).numpy()
    def remove(self): 
      self.hook.remove()

final_layer = model._modules.get('layer4')
print(final_layer)

activated_features = SaveFeatures(final_layer)

prediction = model(prediction_var)

# show the percentage of each class
print(prediction)

pred_probabilities = F.softmax(prediction).data.squeeze()
print(pred_probabilities)

q, w = topk(pred_probabilities, 1)
print(q)
print(w)

def getCAM(feature_conv, weight_fc, class_idx):
    _, nc, h, w = feature_conv.shape
    cam = weight_fc[class_idx].dot(feature_conv.reshape((nc, h*w)))
    cam = cam.reshape(h, w)
    cam = cam - np.min(cam)
    cam_img = cam / np.max(cam)
    return [cam_img]

pp = model._modules
print(pp)

weight_softmax_params = list(model._modules.get('fc').parameters())

# [0] is weight, [1] is bias
print(weight_softmax_params[0].shape)
print(weight_softmax_params[1].shape)

weight_softmax = np.squeeze(weight_softmax_params[0].cpu().data.numpy())
print(weight_softmax.shape)

class_idx = topk(pred_probabilities,1)[1].int()
print(class_idx)

print(activated_features.features.shape)

overlay = getCAM(activated_features.features, weight_softmax, class_idx )

print(overlay[0].shape)

imshow(overlay[0], alpha=0.5, cmap = 'jet')

imshow(display_transform(image))
imshow(skimage.transform.resize(overlay[0], tensor.shape[1:3]), alpha=0.5, cmap='jet')


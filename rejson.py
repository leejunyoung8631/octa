# -*- coding: utf-8 -*-
"""REjson.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sZ2iej01_1NyGcu_hH_DFNtKsvNDAMhv
"""

# Connecting Drive

from google.colab import drive 
drive.mount('/content/drive')

import json
from PIL import Image
import cv2
import torch
import torch
import os
import cv2
import numpy as np
import torch
from PIL import Image
from imgaug import augmenters as iaa
from torch.utils.data import DataLoader
from torch.utils.data import Dataset
import matplotlib.pyplot as plt
from torchvision.utils import save_image
from collections import OrderedDict

IMAGE_DIR = "/content/drive/My Drive/imgs"
ANNOTATION_DIR = "/content/drive/My Drive/whole_labels"

INFO = {
    "description" : "OCTA Image For Predicting aneurysm",
    "url" : "no",
    "version" : "3.16.x",
    "year" : "2020",
    "contributor" : "doctor",
    "date_created" : "i don't know",
}

LICENSES = [
    {
        "id" : 1,
        "name" : "OCTA-Hospital-University",
        "url" : "no",
    }
]

CATEGORIES = [
    {
        "id" : 1,
        "name" : "aneurysm",
        "supercategory" : "eye_disease",
    },
    {
        "id" : 2,
        "name" : "mciroaneurysm",
        "supercategory" : "eye_disease"
    }
]

def parsing_img(imgFile):

    '''

    :param
    imgFile : absolute path of ImgFile
    :return:
    lists : list of all img_info for coco format

    '''

    lists = []
    ids = {}
    for path, dir, files in os.walk(imgFile):

        i = 1

        # info of img
        for filename in files:

            # make ids for parsing_json
            ids[filename] = i

            m = {}
            date = filename.split('_')[-1]
            date = filename.split()[0]

            m['height'] = 304
            m['width'] = 304
            m['data_captured'] = date
            m['license'] = 'no'
            m['file_name'] = filename
            m['id'] = i


           #  m['id'] = ids[filename]

            i += 1
            lists.append(m)

    print(ids.keys())
    return lists, ids


def parsing_json(json_path, dict_img_ids):
    '''

    :param
    json: abs path of json
    dict_img_ids : dict of img_ids from parsing_img
    :return:
    lists : info of all annotation
    '''

    lists = []

    for path, dir, files in os.walk(json_path):
        h=1

        for filename in files:
            with open(os.path.join(json_path,filename), encoding= 'latin') as ind_file:
                ind = json.load(ind_file)
                num_anno = len(ind["shapes"])
                for i in range(num_anno):
                    # 6 components per 1 annotation
                    m = {}

                    m["iscrowd"] = 0
                    m["area"] = 0
                    m['id'] = h

                    img_filename = filename.split('.')[0] + '.png'
                    try:
                      m['image_id'] = dict_img_ids[img_filename]
                    except:
                      continue
                    # m['image_id'] = dict_img_ids[img_filename]


                    if ind["shapes"][i]["label"] == 'aneurysm':
                        m['category_id'] = 1
                    else:
                        m['category_id'] = 1

                    top_left_x, top_left_y = ind['shapes'][i]['points'][0][0], ind['shapes'][i]['points'][1][1]
                    top_left_x, top_left_y = ind['shapes'][i]['points'][0][0], ind['shapes'][i]['points'][0][1]
                    width = ind['shapes'][i]['points'][1][0] - ind['shapes'][i]['points'][0][0]
                    height = ind['shapes'][i]['points'][1][1] - ind['shapes'][i]['points'][0][1]
                    m["bbox"] = [top_left_x, top_left_y, width, height]

                    h += 1
                    lists.append(m)


        return lists


def mkjson_coco():

    coco_output = {
        "info" : INFO,
        "license" : LICENSES,
        "categories" : CATEGORIES,
        "images" : [],
        "annotations" : []
    }

    # process and load data
    info_imgs, img_ids = parsing_img(IMAGE_DIR)
    coco_output["images"] = info_imgs
    info_annotations = parsing_json(ANNOTATION_DIR, img_ids)
    coco_output["annotations"] = info_annotations


    return coco_output



# write and save the file

a = mkjson_coco()

with open('whole_coco_OCTA.json', "w+t") as make_file:
    json.dump(a, make_file, indent='\t')